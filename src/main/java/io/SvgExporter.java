package io;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.URI;
import java.nio.file.Paths;
import java.util.List;

import org.twak.utils.Pair;

import jtsadaptions.OctiGeometryFactory;
import jtsadaptions.OctiLineString;
import morph.NoMinimumOperationException;
import morph.OctiLineMatcher;
import morph.OctiStringAlignment;

import javax.swing.*;
import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.gvt.GVTTreeRendererEvent;
import org.apache.batik.swing.gvt.GVTTreeRendererListener;
import org.apache.batik.swing.svg.*;
import org.w3c.dom.svg.SVGDocument;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


/**
 * todo make factory and have config object
 * todo seperate frame owner and doc creator
 */
public class SvgExporter {

    private static final Logger logger = LogManager.getLogger();
    // The frame.
    protected JFrame frame = new JFrame("SVG Morph");

    // The status label.
    protected JLabel statusLabel = new JLabel();

    protected JSVGCanvas svgCanvas = new JSVGCanvas();

    //the svg
    private SVGDocument doc;
    private final SvgGenerator generator = new SvgGenerator(new SvgGenerator.Config(false, false, true, "green", "blue", "orange", "orange", "white"));
    private final PolygonExtractorInterface extractor = new PolygonExtractor();
    private final String svgDirectory = "./src/main/resources/";
    private final String defaultSvg = "squareRightBoomerang.svg";

    private Dimension minimumCanvasDimension = new Dimension(400,400);

    public static void main(String[] args) {
        SvgExporter exporter = new SvgExporter();
        exporter.show();
    }

    public SvgExporter() {
        try{
            OctiStringAlignment alignments = getAlignment(Paths.get(svgDirectory + defaultSvg).toUri());
            this.doc = generator.generateSVG(alignments);
        }catch (Exception e){
            statusLabel.setText(" Couldn't get alignment. "+ statusLabel.getText());
        }
    }

    public SvgExporter(OctiStringAlignment alignment){
        this.doc = generator.generateSVG(alignment);
    }

    public SvgExporter(List<OctiStringAlignment> alignmentList) { this.doc = generator.generateSVG(alignmentList);}

    public SvgExporter(URI alignableResource) {
        try{
            OctiStringAlignment alignments = getAlignment(alignableResource);
            this.doc = generator.generateSVG(alignments);
        }catch (Exception e){
            statusLabel.setText(" Couldn't get alignment. "+ statusLabel.getText());
        }

    }

    public void show() {
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        refreshCanvas(doc);
        frame.setContentPane(this.createPanel());

        frame.pack();
        frame.setVisible(true);
    }

    /**
     * uses the {@link #extractor} to get the polygons from a file and news up a {@link OctiLineMatcher} to return the {@link OctiStringAlignment}
     *
     * @param uri the uri to locate the svg
     * @return the alignment, null if no alignment could be generated by the {@link OctiLineMatcher}
     */
    private OctiStringAlignment getAlignment(URI uri) throws Exception {
        try {
            extractor.parseFile(uri);
        } catch (IOException e) {
            e.printStackTrace();
            logger.warn("couldn't open supplied ressource");
            statusLabel.setText("couldn't open selected ressource");
            throw e;
        } catch (FileParseException e){
            e.printStackTrace();
            logger.warn("couldn't parse supplied ressource");
            statusLabel.setText("couldn't parse selected ressource");
            throw e;
        }

        OctiLineString olsSource = null;
        OctiLineString olsTarget = null;
        try {
            olsSource = OctiGeometryFactory.OCTI_FACTORY.convertToOctiLineString(extractor.getNthGeometry(0));
            olsTarget =  OctiGeometryFactory.OCTI_FACTORY.convertToOctiLineString(extractor.getNthGeometry(1));
        } catch (Exception e) {
            logger.warn("couldn't convert ressource into alignable OctiLineString");
            e.printStackTrace();
        }

        OctiLineMatcher matcher = new OctiLineMatcher(olsSource, olsTarget);

        try {
            return matcher.getAlignment();
        } catch (NoMinimumOperationException e) {
            e.printStackTrace();
            logger.warn("no valid match");
            throw new Exception("no valid match"); //todo: specify to have matcher load information into it
        }
    }

    /**
     * Deprecated
     * Index based parse
     *
     * @param src the sourceString
     * @param tar the targetString
     * @param match the point to point assignments, annotated with the corresponding move
     * @return the svg String
     */
    private Pair<String, String> parse(OctiLineString src, OctiLineString tar, List<Pair<Pair<Integer, Integer>, Integer>> match) {
        StringBuilder srcBuilder = new StringBuilder();
        StringBuilder tarBuilder = new StringBuilder();

        for (int idx = 0; idx < match.size(); idx++) {
            Pair<Pair<Integer, Integer>, Integer> m = match.get(idx);
            srcBuilder.append(src.getCoordinateN(m.first().first()).x).append(",").append(src.getCoordinateN(m.first().first()).y).append(" ");
            tarBuilder.append(tar.getCoordinateN(m.first().second()).x).append(",").append(tar.getCoordinateN(m.first().second()).y).append(" ");
        }
        //from and to attributes
        String sourceString = srcBuilder.substring(0, srcBuilder.length() - 1);
        String targetString = tarBuilder.substring(0, tarBuilder.length() - 1);
        logger.trace(sourceString);
        logger.trace(targetString);
        Pair<String, String> svgStrings = new Pair<>(sourceString, targetString);

        return svgStrings;
    }

    private void refreshCanvas(SVGDocument d) { //todo clean up
        svgCanvas.setSVGDocument(d);
        svgCanvas.setDocumentState(JSVGComponent.ALWAYS_DYNAMIC);
    }

    public JComponent createPanel() {
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints gbc = new GridBagConstraints();

        final JPanel panel = new JPanel(gbl);

        final JPanel actionsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        JButton button = addSVGLoadFunctionality(panel, "Load svg");

        actionsPanel.add(button);
        actionsPanel.add(statusLabel);

        statusLabel.setText("");

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(actionsPanel, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1;
        gbc.weighty = 1;
        gbc.fill = GridBagConstraints.BOTH;
        //debug colors
        svgCanvas.setBackground(Color.black);
        panel.setBackground(Color.MAGENTA);
        actionsPanel.setBackground(Color.BLUE);

        panel.add(svgCanvas, gbc);
        return panel;
    }

    private URI selectFile(Component parent){
        JFileChooser fc = new JFileChooser(svgDirectory);
        int choice = fc.showOpenDialog(parent);
        if (choice == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            URI fileUri = file.toURI();
            logger.trace("selected " + file.toURI().toString());
            return fileUri;
        }
        return null;
    }

    private JButton addSVGLoadFunctionality(Component parent, String buttonText) {
        JButton button = new JButton(buttonText);
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {

                URI svgUri = selectFile(parent);

                if(svgUri != null){
                    try{
                        statusLabel.setText("");
                        OctiStringAlignment newAlignment = getAlignment(svgUri);
                        doc = generator.generateSVG(newAlignment);
                        refreshCanvas(doc);
                    }catch (Exception e){
                         statusLabel.setText(" Couldn't get alignment. "+ statusLabel.getText());
                    }
                }
            }
        });

        svgCanvas.addGVTTreeRendererListener(new GVTTreeRendererListener() {
            @Override
            public void gvtRenderingPrepare(GVTTreeRendererEvent e) {
                //nothing
            }

            @Override
            public void gvtRenderingStarted(GVTTreeRendererEvent e) {
                //nothing
            }

            @Override
            public void gvtRenderingCompleted(GVTTreeRendererEvent e) {
                logger.trace("rendering and loading complete");
                Dimension svgDim = SvgGenerator.retrieveDimension(doc);
                if(svgDim.height < minimumCanvasDimension.height || svgDim.width < minimumCanvasDimension.width) svgDim = minimumCanvasDimension;
                svgCanvas.setPreferredSize(svgDim);
                frame.pack();
            }

            @Override
            public void gvtRenderingCancelled(GVTTreeRendererEvent e) {
                //nothing
            }

            @Override
            public void gvtRenderingFailed(GVTTreeRendererEvent e) {
                //nothing
            }
        });
        // Set the JSVGCanvas listeners.
        svgCanvas.addSVGDocumentLoaderListener(new SVGDocumentLoaderAdapter() {
            public void documentLoadingStarted(SVGDocumentLoaderEvent e) {
                logger.trace("document loading");
                statusLabel.setText("Document Loading...");
            }

            public void documentLoadingCompleted(SVGDocumentLoaderEvent e) {

                logger.trace("document loaded");
                statusLabel.setText("Document Loaded.");
            }

            public void documentLoadingFailed(SVGDocumentLoaderEvent e) {

                logger.trace("document loading failed");
                statusLabel.setText("Document loading failed.");
            }
        });

        return button;
    }
}
